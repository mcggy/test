# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        flag = 0
        dummyRoot = ListNode(0)
        ptr = dummyRoot
        while l1 and l2:
            if l1.val+l2.val+flag>=10:   
                ptr.next = ListNode(l1.val+l2.val+flag-10)
                flag = 1 
            else:
                ptr.next = ListNode(l1.val+l2.val+flag)
                flag = 0
            
            l1 = l1.next
            l2 = l2.next
            ptr = ptr.next

        while l1:
            if l1.val+flag>=10:  
                ptr.next = ListNode(l1.val+flag-10)
                flag = 1
            else:
                ptr.next = ListNode(l1.val+flag)
                flag = 0
            l1=l1.next
            ptr = ptr.next
        while l2:
            if l2.val+flag>=10:
                ptr.next = ListNode(l2.val+flag-10)
                flag = 1
            else:
                ptr.next = ListNode(l2.val+flag)
                flag = 0
            l2=l2.next
            ptr = ptr.next
        if (l1==None and l2==None) and flag==1:
            ptr.next = ListNode(1)
        ptr = dummyRoot.next
        return ptr

def stringToListNode(input):
    # Generate list from the input
    numbers = json.loads(input)

    # Now convert that list into linked list
    dummyRoot = ListNode(0)
    ptr = dummyRoot
    for number in numbers:
        ptr.next = ListNode(number)
        ptr = ptr.next

    ptr = dummyRoot.next
    return ptr

def listNodeToString(node):
    if not node:
        return "[]"

    result = ""
    while node:
        result += str(node.val) + ", "
        node = node.next
    return "[" + result[:-2] + "]"

def main():
    import sys
    def readlines():
        for line in sys.stdin:
            yield line.strip('\n')
    lines = readlines()
    while True:
        try:
            line = lines.next()
            l1 = stringToListNode(line)
            line = lines.next()
            l2 = stringToListNode(line)
            
            ret = Solution().addTwoNumbers(l1, l2)

            out = listNodeToString(ret)
            print out
        except StopIteration:
            break

if __name__ == '__main__':
    main()